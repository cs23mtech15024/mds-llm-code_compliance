[
  {
    "seed_id": "001",
    "context": "PID motor speed controller in an embedded robot base",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 001 \u2014 NC (context: PID motor speed controller in an embedded robot base)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 001 \u2014 C (context: PID motor speed controller in an embedded robot base)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (001_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: PID motor speed controller in an embedded robot base\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_001 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[001] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_001::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (001_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: PID motor speed controller in an embedded robot base\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_001 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[001] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_001::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "002",
    "context": "Opacity control for UI overlay window",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 002 \u2014 NC (context: Opacity control for UI overlay window)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 002 \u2014 C (context: Opacity control for UI overlay window)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (002_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Opacity control for UI overlay window\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_002 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[002] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_002::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (002_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Opacity control for UI overlay window\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_002 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[002] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_002::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "003",
    "context": "Drone stabilization loop (pitch/roll/yaw)",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 003 \u2014 NC (context: Drone stabilization loop (pitch/roll/yaw))\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 003 \u2014 C (context: Drone stabilization loop (pitch/roll/yaw))\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (003_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Drone stabilization loop (pitch/roll/yaw)\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_003 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[003] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_003::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (003_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Drone stabilization loop (pitch/roll/yaw)\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_003 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[003] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_003::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "004",
    "context": "Audio AGC (automatic gain control) smoothing filter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 004 \u2014 NC (context: Audio AGC (automatic gain control) smoothing filter)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 004 \u2014 C (context: Audio AGC (automatic gain control) smoothing filter)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (004_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Audio AGC (automatic gain control) smoothing filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_004 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[004] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_004::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (004_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Audio AGC (automatic gain control) smoothing filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_004 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[004] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_004::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "005",
    "context": "Thermal sensor fusion in HVAC control",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 005 \u2014 NC (context: Thermal sensor fusion in HVAC control)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 005 \u2014 C (context: Thermal sensor fusion in HVAC control)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (005_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Thermal sensor fusion in HVAC control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_005 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[005] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_005::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (005_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Thermal sensor fusion in HVAC control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_005 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[005] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_005::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "006",
    "context": "Battery state-of-charge estimator in BMS",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 006 \u2014 NC (context: Battery state-of-charge estimator in BMS)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 006 \u2014 C (context: Battery state-of-charge estimator in BMS)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (006_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Battery state-of-charge estimator in BMS\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_006 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[006] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_006::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (006_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Battery state-of-charge estimator in BMS\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_006 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[006] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_006::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "007",
    "context": "Camera ISP exposure ramping controller",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 007 \u2014 NC (context: Camera ISP exposure ramping controller)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 007 \u2014 C (context: Camera ISP exposure ramping controller)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (007_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Camera ISP exposure ramping controller\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_007 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[007] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_007::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (007_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Camera ISP exposure ramping controller\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_007 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[007] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_007::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "008",
    "context": "Autonomous braking distance estimator",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 008 \u2014 NC (context: Autonomous braking distance estimator)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 008 \u2014 C (context: Autonomous braking distance estimator)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (008_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Autonomous braking distance estimator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_008 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[008] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_008::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (008_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Autonomous braking distance estimator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_008 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[008] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_008::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "009",
    "context": "Satellite attitude quaternion damping",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 009 \u2014 NC (context: Satellite attitude quaternion damping)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 009 \u2014 C (context: Satellite attitude quaternion damping)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (009_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Satellite attitude quaternion damping\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_009 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[009] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_009::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (009_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Satellite attitude quaternion damping\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_009 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[009] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_009::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "010",
    "context": "UWB ranging Kalman update step",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 010 \u2014 NC (context: UWB ranging Kalman update step)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 010 \u2014 C (context: UWB ranging Kalman update step)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (010_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: UWB ranging Kalman update step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_010 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[010] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_010::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (010_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: UWB ranging Kalman update step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_010 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[010] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_010::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "011",
    "context": "Network congestion window ramp for TCP-like throttle",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 011 \u2014 NC (context: Network congestion window ramp for TCP-like throttle)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 011 \u2014 C (context: Network congestion window ramp for TCP-like throttle)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (011_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Network congestion window ramp for TCP-like throttle\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_011 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[011] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_011::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (011_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Network congestion window ramp for TCP-like throttle\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_011 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[011] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_011::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "012",
    "context": "Power inverter sine PWM modulator",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 012 \u2014 NC (context: Power inverter sine PWM modulator)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 012 \u2014 C (context: Power inverter sine PWM modulator)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (012_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Power inverter sine PWM modulator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_012 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[012] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_012::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (012_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Power inverter sine PWM modulator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_012 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[012] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_012::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "013",
    "context": "Automotive throttle mapping curve evaluator",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 013 \u2014 NC (context: Automotive throttle mapping curve evaluator)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 013 \u2014 C (context: Automotive throttle mapping curve evaluator)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (013_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Automotive throttle mapping curve evaluator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_013 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[013] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_013::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (013_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Automotive throttle mapping curve evaluator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_013 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[013] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_013::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "014",
    "context": "IMU complementary filter blending",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 014 \u2014 NC (context: IMU complementary filter blending)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 014 \u2014 C (context: IMU complementary filter blending)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (014_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: IMU complementary filter blending\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_014 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[014] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_014::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (014_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: IMU complementary filter blending\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_014 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[014] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_014::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "015",
    "context": "Radar CFAR threshold scaler",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 015 \u2014 NC (context: Radar CFAR threshold scaler)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 015 \u2014 C (context: Radar CFAR threshold scaler)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (015_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Radar CFAR threshold scaler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_015 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[015] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_015::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (015_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Radar CFAR threshold scaler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_015 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[015] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_015::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "016",
    "context": "Lidar voxel downsampling ratio",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 016 \u2014 NC (context: Lidar voxel downsampling ratio)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 016 \u2014 C (context: Lidar voxel downsampling ratio)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (016_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Lidar voxel downsampling ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_016 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[016] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_016::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (016_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Lidar voxel downsampling ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_016 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[016] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_016::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "017",
    "context": "Digital PLL loop filter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 017 \u2014 NC (context: Digital PLL loop filter)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 017 \u2014 C (context: Digital PLL loop filter)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (017_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Digital PLL loop filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_017 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[017] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_017::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (017_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Digital PLL loop filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_017 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[017] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_017::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "018",
    "context": "Quadcopter altitude hold PI controller",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 018 \u2014 NC (context: Quadcopter altitude hold PI controller)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 018 \u2014 C (context: Quadcopter altitude hold PI controller)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (018_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Quadcopter altitude hold PI controller\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_018 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[018] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_018::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (018_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Quadcopter altitude hold PI controller\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_018 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[018] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_018::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "019",
    "context": "Servo gimbal stabilization",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 019 \u2014 NC (context: Servo gimbal stabilization)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 019 \u2014 C (context: Servo gimbal stabilization)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (019_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Servo gimbal stabilization\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_019 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[019] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_019::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (019_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Servo gimbal stabilization\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_019 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[019] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_019::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "020",
    "context": "3D printer temperature PID",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 020 \u2014 NC (context: 3D printer temperature PID)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 020 \u2014 C (context: 3D printer temperature PID)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (020_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: 3D printer temperature PID\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_020 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[020] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_020::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (020_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: 3D printer temperature PID\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_020 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[020] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_020::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "021",
    "context": "Wind turbine pitch angle scheduler",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 021 \u2014 NC (context: Wind turbine pitch angle scheduler)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 021 \u2014 C (context: Wind turbine pitch angle scheduler)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (021_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Wind turbine pitch angle scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_021 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[021] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_021::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (021_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Wind turbine pitch angle scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_021 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[021] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_021::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "022",
    "context": "Elevator car speed profile planner",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 022 \u2014 NC (context: Elevator car speed profile planner)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 022 \u2014 C (context: Elevator car speed profile planner)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (022_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Elevator car speed profile planner\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_022 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[022] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_022::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (022_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Elevator car speed profile planner\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_022 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[022] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_022::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "023",
    "context": "Railway signaling debounce timer",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 023 \u2014 NC (context: Railway signaling debounce timer)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 023 \u2014 C (context: Railway signaling debounce timer)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (023_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Railway signaling debounce timer\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_023 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[023] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_023::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (023_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Railway signaling debounce timer\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_023 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[023] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_023::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "024",
    "context": "Spacecraft reaction wheel torque limit",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 024 \u2014 NC (context: Spacecraft reaction wheel torque limit)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 024 \u2014 C (context: Spacecraft reaction wheel torque limit)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (024_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Spacecraft reaction wheel torque limit\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_024 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[024] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_024::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (024_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Spacecraft reaction wheel torque limit\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_024 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[024] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_024::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "025",
    "context": "Maritime autopilot cross-track error",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 025 \u2014 NC (context: Maritime autopilot cross-track error)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 025 \u2014 C (context: Maritime autopilot cross-track error)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (025_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Maritime autopilot cross-track error\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_025 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[025] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_025::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (025_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Maritime autopilot cross-track error\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_025 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[025] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_025::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "026",
    "context": "Medical ventilator tidal volume calculator",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 026 \u2014 NC (context: Medical ventilator tidal volume calculator)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 026 \u2014 C (context: Medical ventilator tidal volume calculator)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (026_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Medical ventilator tidal volume calculator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_026 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[026] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_026::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (026_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Medical ventilator tidal volume calculator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_026 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[026] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_026::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "027",
    "context": "Pacemaker heart rate smoothing",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 027 \u2014 NC (context: Pacemaker heart rate smoothing)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 027 \u2014 C (context: Pacemaker heart rate smoothing)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (027_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Pacemaker heart rate smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_027 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[027] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_027::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (027_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Pacemaker heart rate smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_027 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[027] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_027::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "028",
    "context": "Infusion pump drip rate guard",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 028 \u2014 NC (context: Infusion pump drip rate guard)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 028 \u2014 C (context: Infusion pump drip rate guard)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (028_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Infusion pump drip rate guard\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_028 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[028] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_028::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (028_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Infusion pump drip rate guard\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_028 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[028] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_028::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "029",
    "context": "Automated irrigation moisture threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 029 \u2014 NC (context: Automated irrigation moisture threshold)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 029 \u2014 C (context: Automated irrigation moisture threshold)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (029_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Automated irrigation moisture threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_029 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[029] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_029::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (029_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Automated irrigation moisture threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_029 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[029] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_029::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "030",
    "context": "Smart meter demand response ramp",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 030 \u2014 NC (context: Smart meter demand response ramp)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 030 \u2014 C (context: Smart meter demand response ramp)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (030_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Smart meter demand response ramp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_030 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[030] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_030::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (030_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Smart meter demand response ramp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_030 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[030] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_030::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "031",
    "context": "Energy storage inverter droop control",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 031 \u2014 NC (context: Energy storage inverter droop control)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 031 \u2014 C (context: Energy storage inverter droop control)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (031_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Energy storage inverter droop control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_031 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[031] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_031::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (031_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Energy storage inverter droop control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_031 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[031] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_031::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "032",
    "context": "AC motor V/Hz scalar control",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 032 \u2014 NC (context: AC motor V/Hz scalar control)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 032 \u2014 C (context: AC motor V/Hz scalar control)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (032_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: AC motor V/Hz scalar control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_032 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[032] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_032::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (032_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: AC motor V/Hz scalar control\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_032 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[032] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_032::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "033",
    "context": "Photovoltaic MPPT step size scheduler",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 033 \u2014 NC (context: Photovoltaic MPPT step size scheduler)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 033 \u2014 C (context: Photovoltaic MPPT step size scheduler)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (033_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Photovoltaic MPPT step size scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_033 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[033] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_033::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (033_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Photovoltaic MPPT step size scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_033 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[033] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_033::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "034",
    "context": "EV charger current ramp limiter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 034 \u2014 NC (context: EV charger current ramp limiter)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 034 \u2014 C (context: EV charger current ramp limiter)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (034_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: EV charger current ramp limiter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_034 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[034] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_034::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (034_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: EV charger current ramp limiter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_034 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[034] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_034::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "035",
    "context": "CNC spindle acceleration profile",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 035 \u2014 NC (context: CNC spindle acceleration profile)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 035 \u2014 C (context: CNC spindle acceleration profile)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (035_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: CNC spindle acceleration profile\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_035 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[035] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_035::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (035_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: CNC spindle acceleration profile\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_035 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[035] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_035::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "036",
    "context": "Robotic arm joint damping",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 036 \u2014 NC (context: Robotic arm joint damping)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 036 \u2014 C (context: Robotic arm joint damping)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (036_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Robotic arm joint damping\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_036 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[036] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_036::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (036_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Robotic arm joint damping\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_036 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[036] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_036::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "037",
    "context": "BLDC sensorless back-EMF threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 037 \u2014 NC (context: BLDC sensorless back-EMF threshold)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 037 \u2014 C (context: BLDC sensorless back-EMF threshold)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (037_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: BLDC sensorless back-EMF threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_037 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[037] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_037::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (037_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: BLDC sensorless back-EMF threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_037 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[037] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_037::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "038",
    "context": "Battery pack cell balancing hysteresis",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 038 \u2014 NC (context: Battery pack cell balancing hysteresis)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 038 \u2014 C (context: Battery pack cell balancing hysteresis)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (038_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Battery pack cell balancing hysteresis\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_038 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[038] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_038::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (038_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Battery pack cell balancing hysteresis\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_038 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[038] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_038::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "039",
    "context": "Wind sensor gust spike filter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 039 \u2014 NC (context: Wind sensor gust spike filter)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 039 \u2014 C (context: Wind sensor gust spike filter)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (039_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Wind sensor gust spike filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_039 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[039] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_039::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (039_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Wind sensor gust spike filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_039 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[039] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_039::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "040",
    "context": "GPS track smoothing with windowed mean",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 040 \u2014 NC (context: GPS track smoothing with windowed mean)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 040 \u2014 C (context: GPS track smoothing with windowed mean)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (040_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: GPS track smoothing with windowed mean\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_040 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[040] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_040::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (040_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: GPS track smoothing with windowed mean\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_040 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[040] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_040::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "041",
    "context": "Gamma correction LUT scaler",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 041 \u2014 NC (context: Gamma correction LUT scaler)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 041 \u2014 C (context: Gamma correction LUT scaler)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (041_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Gamma correction LUT scaler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_041 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[041] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_041::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (041_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Gamma correction LUT scaler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_041 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[041] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_041::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "042",
    "context": "Display backlight brightness ramp",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 042 \u2014 NC (context: Display backlight brightness ramp)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 042 \u2014 C (context: Display backlight brightness ramp)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (042_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Display backlight brightness ramp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_042 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[042] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_042::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (042_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Display backlight brightness ramp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_042 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[042] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_042::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "043",
    "context": "Camera pan-tilt soft start",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 043 \u2014 NC (context: Camera pan-tilt soft start)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 043 \u2014 C (context: Camera pan-tilt soft start)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (043_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Camera pan-tilt soft start\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_043 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[043] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_043::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (043_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Camera pan-tilt soft start\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_043 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[043] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_043::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "044",
    "context": "Proximity sensor debounce",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 044 \u2014 NC (context: Proximity sensor debounce)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 044 \u2014 C (context: Proximity sensor debounce)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (044_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Proximity sensor debounce\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_044 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[044] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_044::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (044_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Proximity sensor debounce\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_044 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[044] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_044::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "045",
    "context": "Ultrasonic level gauge averaging",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 045 \u2014 NC (context: Ultrasonic level gauge averaging)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 045 \u2014 C (context: Ultrasonic level gauge averaging)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (045_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Ultrasonic level gauge averaging\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_045 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[045] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_045::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (045_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Ultrasonic level gauge averaging\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_045 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[045] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_045::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "046",
    "context": "Fuel injector pulse width clamp",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 046 \u2014 NC (context: Fuel injector pulse width clamp)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 046 \u2014 C (context: Fuel injector pulse width clamp)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (046_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Fuel injector pulse width clamp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_046 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[046] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_046::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (046_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Fuel injector pulse width clamp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_046 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[046] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_046::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "047",
    "context": "ABS slip ratio estimator",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 047 \u2014 NC (context: ABS slip ratio estimator)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 047 \u2014 C (context: ABS slip ratio estimator)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (047_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: ABS slip ratio estimator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_047 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[047] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_047::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (047_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: ABS slip ratio estimator\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_047 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[047] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_047::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "048",
    "context": "Lane assist lateral gain",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 048 \u2014 NC (context: Lane assist lateral gain)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 048 \u2014 C (context: Lane assist lateral gain)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (048_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Lane assist lateral gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_048 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[048] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_048::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (048_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Lane assist lateral gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_048 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[048] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_048::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "049",
    "context": "Head-up display alpha fade",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 049 \u2014 NC (context: Head-up display alpha fade)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 049 \u2014 C (context: Head-up display alpha fade)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (049_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Head-up display alpha fade\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_049 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[049] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_049::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (049_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Head-up display alpha fade\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_049 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[049] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_049::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "050",
    "context": "Inertial nav step length factor",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 050 \u2014 NC (context: Inertial nav step length factor)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 050 \u2014 C (context: Inertial nav step length factor)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (050_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Inertial nav step length factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_050 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[050] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_050::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (050_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Inertial nav step length factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_050 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[050] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_050::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "051",
    "context": "Smart lock motor timeout",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 051 \u2014 NC (context: Smart lock motor timeout)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 051 \u2014 C (context: Smart lock motor timeout)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (051_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Smart lock motor timeout\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_051 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[051] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_051::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (051_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Smart lock motor timeout\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_051 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[051] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_051::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "052",
    "context": "Air purifier fan PWM map",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 052 \u2014 NC (context: Air purifier fan PWM map)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 052 \u2014 C (context: Air purifier fan PWM map)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (052_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Air purifier fan PWM map\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_052 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[052] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_052::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (052_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Air purifier fan PWM map\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_052 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[052] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_052::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "053",
    "context": "Thermostat setback schedule",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 053 \u2014 NC (context: Thermostat setback schedule)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 053 \u2014 C (context: Thermostat setback schedule)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (053_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Thermostat setback schedule\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_053 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[053] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_053::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (053_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: Thermostat setback schedule\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_053 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[053] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_053::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "054",
    "context": "Human presence sensor filter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 054 \u2014 NC (context: Human presence sensor filter)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 054 \u2014 C (context: Human presence sensor filter)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (054_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Human presence sensor filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_054 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[054] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_054::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (054_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Human presence sensor filter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_054 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[054] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_054::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "055",
    "context": "Spectrometer integration time scale",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 055 \u2014 NC (context: Spectrometer integration time scale)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 055 \u2014 C (context: Spectrometer integration time scale)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (055_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Spectrometer integration time scale\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_055 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[055] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_055::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (055_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Spectrometer integration time scale\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_055 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[055] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_055::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "056",
    "context": "Geiger counter CPM smoothing",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 056 \u2014 NC (context: Geiger counter CPM smoothing)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 056 \u2014 C (context: Geiger counter CPM smoothing)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (056_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Geiger counter CPM smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_056 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[056] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_056::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (056_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Geiger counter CPM smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_056 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[056] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_056::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "057",
    "context": "Seismic sensor trigger threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 057 \u2014 NC (context: Seismic sensor trigger threshold)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 057 \u2014 C (context: Seismic sensor trigger threshold)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (057_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Seismic sensor trigger threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_057 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[057] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_057::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (057_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Seismic sensor trigger threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_057 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[057] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_057::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "058",
    "context": "Hydraulic valve slew limiter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 058 \u2014 NC (context: Hydraulic valve slew limiter)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 058 \u2014 C (context: Hydraulic valve slew limiter)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (058_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Hydraulic valve slew limiter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_058 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[058] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_058::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (058_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Hydraulic valve slew limiter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_058 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[058] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_058::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "059",
    "context": "Pressure transducer zero drift",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 059 \u2014 NC (context: Pressure transducer zero drift)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 059 \u2014 C (context: Pressure transducer zero drift)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (059_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Pressure transducer zero drift\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_059 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[059] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_059::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (059_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Pressure transducer zero drift\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_059 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[059] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_059::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "060",
    "context": "Aircraft flap position scheduler",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 060 \u2014 NC (context: Aircraft flap position scheduler)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 060 \u2014 C (context: Aircraft flap position scheduler)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (060_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Aircraft flap position scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_060 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[060] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_060::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (060_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Aircraft flap position scheduler\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_060 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[060] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_060::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "061",
    "context": "Cabin noise ANC gain",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 061 \u2014 NC (context: Cabin noise ANC gain)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 061 \u2014 C (context: Cabin noise ANC gain)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (061_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Cabin noise ANC gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_061 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[061] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_061::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (061_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: Cabin noise ANC gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_061 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[061] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_061::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "062",
    "context": "ADAS object tracker velocity blend",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 062 \u2014 NC (context: ADAS object tracker velocity blend)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 062 \u2014 C (context: ADAS object tracker velocity blend)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (062_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: ADAS object tracker velocity blend\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_062 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[062] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_062::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (062_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: ADAS object tracker velocity blend\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_062 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[062] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_062::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "063",
    "context": "Solar tracker azimuth step",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 063 \u2014 NC (context: Solar tracker azimuth step)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 063 \u2014 C (context: Solar tracker azimuth step)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (063_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Solar tracker azimuth step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_063 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[063] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_063::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (063_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: Solar tracker azimuth step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_063 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[063] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_063::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "064",
    "context": "Tachometer pulses-per-rev parameter",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 064 \u2014 NC (context: Tachometer pulses-per-rev parameter)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 064 \u2014 C (context: Tachometer pulses-per-rev parameter)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (064_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Tachometer pulses-per-rev parameter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_064 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[064] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_064::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (064_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Tachometer pulses-per-rev parameter\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_064 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[064] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_064::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "065",
    "context": "Odometer calibration factor",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 065 \u2014 NC (context: Odometer calibration factor)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 065 \u2014 C (context: Odometer calibration factor)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (065_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Odometer calibration factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_065 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[065] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_065::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (065_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Odometer calibration factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_065 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[065] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_065::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "066",
    "context": "Gyro bias learning rate",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 066 \u2014 NC (context: Gyro bias learning rate)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 066 \u2014 C (context: Gyro bias learning rate)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (066_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Gyro bias learning rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_066 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[066] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_066::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (066_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Gyro bias learning rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_066 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[066] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_066::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "067",
    "context": "Barometer altitude smoothing",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 067 \u2014 NC (context: Barometer altitude smoothing)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 067 \u2014 C (context: Barometer altitude smoothing)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (067_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Barometer altitude smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_067 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[067] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_067::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (067_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Barometer altitude smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_067 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[067] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_067::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "068",
    "context": "Altimeter QNH conversion factor",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 068 \u2014 NC (context: Altimeter QNH conversion factor)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 068 \u2014 C (context: Altimeter QNH conversion factor)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (068_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Altimeter QNH conversion factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_068 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[068] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_068::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (068_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Altimeter QNH conversion factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_068 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[068] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_068::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "069",
    "context": "Anemometer cup factor scale",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 069 \u2014 NC (context: Anemometer cup factor scale)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 069 \u2014 C (context: Anemometer cup factor scale)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (069_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Anemometer cup factor scale\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_069 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[069] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_069::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (069_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Anemometer cup factor scale\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_069 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[069] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_069::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "070",
    "context": "Water flow sensor K-factor",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 070 \u2014 NC (context: Water flow sensor K-factor)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 070 \u2014 C (context: Water flow sensor K-factor)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (070_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Water flow sensor K-factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_070 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[070] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_070::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (070_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: Water flow sensor K-factor\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_070 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[070] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_070::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "071",
    "context": "Dose calibrator decay constant",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 071 \u2014 NC (context: Dose calibrator decay constant)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 071 \u2014 C (context: Dose calibrator decay constant)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (071_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Dose calibrator decay constant\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_071 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[071] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_071::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (071_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Dose calibrator decay constant\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_071 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[071] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_071::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "072",
    "context": "ECG filter notch width",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 072 \u2014 NC (context: ECG filter notch width)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 072 \u2014 C (context: ECG filter notch width)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (072_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: ECG filter notch width\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_072 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[072] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_072::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (072_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: ECG filter notch width\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_072 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[072] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_072::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "073",
    "context": "EEG amplifier gain",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 073 \u2014 NC (context: EEG amplifier gain)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 073 \u2014 C (context: EEG amplifier gain)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (073_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: EEG amplifier gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_073 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[073] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_073::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (073_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: EEG amplifier gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_073 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[073] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_073::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "074",
    "context": "Spectral analyzer bin width",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 074 \u2014 NC (context: Spectral analyzer bin width)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 074 \u2014 C (context: Spectral analyzer bin width)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (074_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Spectral analyzer bin width\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_074 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[074] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_074::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (074_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Spectral analyzer bin width\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_074 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[074] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_074::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "075",
    "context": "Comms modem symbol rate",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 075 \u2014 NC (context: Comms modem symbol rate)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 075 \u2014 C (context: Comms modem symbol rate)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (075_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Comms modem symbol rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_075 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[075] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_075::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (075_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Comms modem symbol rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_075 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[075] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_075::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "076",
    "context": "RF power detector slope",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 076 \u2014 NC (context: RF power detector slope)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 076 \u2014 C (context: RF power detector slope)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (076_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: RF power detector slope\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_076 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[076] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_076::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (076_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: RF power detector slope\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_076 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[076] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_076::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "077",
    "context": "Audio compressor ratio",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 077 \u2014 NC (context: Audio compressor ratio)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 077 \u2014 C (context: Audio compressor ratio)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (077_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Audio compressor ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_077 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[077] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_077::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (077_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Audio compressor ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_077 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[077] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_077::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "078",
    "context": "Reverb wet/dry mix",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 078 \u2014 NC (context: Reverb wet/dry mix)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 078 \u2014 C (context: Reverb wet/dry mix)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (078_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Reverb wet/dry mix\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_078 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[078] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_078::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (078_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Reverb wet/dry mix\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_078 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[078] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_078::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "079",
    "context": "Limiter ceiling threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 079 \u2014 NC (context: Limiter ceiling threshold)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 079 \u2014 C (context: Limiter ceiling threshold)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (079_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Limiter ceiling threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_079 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[079] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_079::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (079_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Limiter ceiling threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_079 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[079] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_079::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "080",
    "context": "Dithering noise amount",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 080 \u2014 NC (context: Dithering noise amount)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 080 \u2014 C (context: Dithering noise amount)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (080_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Dithering noise amount\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_080 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[080] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_080::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (080_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Dithering noise amount\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_080 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[080] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_080::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "081",
    "context": "AGC target RMS level",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 081 \u2014 NC (context: AGC target RMS level)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 081 \u2014 C (context: AGC target RMS level)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (081_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: AGC target RMS level\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_081 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[081] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_081::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (081_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xFFu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XFFU\n// Context: AGC target RMS level\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_081 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[081] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_081::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "082",
    "context": "Color temperature blend",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 082 \u2014 NC (context: Color temperature blend)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 082 \u2014 C (context: Color temperature blend)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (082_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Color temperature blend\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_082 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[082] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_082::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (082_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x7fu;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X7FU\n// Context: Color temperature blend\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_082 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[082] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_082::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "083",
    "context": "White balance gain",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 083 \u2014 NC (context: White balance gain)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 083 \u2014 C (context: White balance gain)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (083_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: White balance gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_083 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[083] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_083::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (083_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xabcdefu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XABCDEFU\n// Context: White balance gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_083 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[083] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_083::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "084",
    "context": "Lens vignetting correction",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 084 \u2014 NC (context: Lens vignetting correction)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 084 \u2014 C (context: Lens vignetting correction)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (084_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Lens vignetting correction\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_084 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[084] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_084::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (084_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x1234u;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X1234U\n// Context: Lens vignetting correction\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_084 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[084] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_084::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "085",
    "context": "Distortion correction strength",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 085 \u2014 NC (context: Distortion correction strength)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 085 \u2014 C (context: Distortion correction strength)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (085_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Distortion correction strength\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_085 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[085] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_085::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (085_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xFFu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XFFU\n// Context: Distortion correction strength\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_085 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[085] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_085::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "086",
    "context": "Sharpening amount",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 086 \u2014 NC (context: Sharpening amount)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 086 \u2014 C (context: Sharpening amount)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (086_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Sharpening amount\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_086 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[086] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_086::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (086_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x7fu;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X7FU\n// Context: Sharpening amount\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_086 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[086] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_086::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "087",
    "context": "Denoiser strength",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 087 \u2014 NC (context: Denoiser strength)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 087 \u2014 C (context: Denoiser strength)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (087_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Denoiser strength\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_087 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[087] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_087::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (087_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xabcdefu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XABCDEFU\n// Context: Denoiser strength\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_087 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[087] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_087::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "088",
    "context": "Edge detector hysteresis",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 088 \u2014 NC (context: Edge detector hysteresis)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 088 \u2014 C (context: Edge detector hysteresis)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (088_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Edge detector hysteresis\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_088 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[088] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_088::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (088_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x1234u;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X1234U\n// Context: Edge detector hysteresis\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_088 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[088] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_088::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "089",
    "context": "Exposure compensation step",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 089 \u2014 NC (context: Exposure compensation step)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 089 \u2014 C (context: Exposure compensation step)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (089_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Exposure compensation step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_089 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[089] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_089::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (089_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xFFu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XFFU\n// Context: Exposure compensation step\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_089 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[089] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_089::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "090",
    "context": "ISO to noise model slope",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 090 \u2014 NC (context: ISO to noise model slope)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 090 \u2014 C (context: ISO to noise model slope)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (090_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: ISO to noise model slope\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_090 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[090] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_090::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (090_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x7fu;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X7FU\n// Context: ISO to noise model slope\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_090 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[090] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_090::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "091",
    "context": "Time-of-flight phase gain",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 091 \u2014 NC (context: Time-of-flight phase gain)\n#include <iostream>\nint main() {\n    const float A = 1.5f;\n    const unsigned B = 400u;\n    const long C = 1705000000l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 091 \u2014 C (context: Time-of-flight phase gain)\n#include <iostream>\nint main() {\n    const float A = 1.5F;\n    const unsigned B = 400U;\n    const long C = 1705000000L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (091_nc.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Time-of-flight phase gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_091 {\n    constexpr float kGain = 1.5f;       // NC\n    constexpr unsigned kPeriod = 400u;  // NC\n    constexpr long kEpoch = 1705000000l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[091] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_091::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (091_c.cpp)\n// Seed: Non-compliant: float=1.5f, unsigned=400u, long=1705000000l, hex=0xabcdefu;  Compliant: float=1.5F, unsigned=400U, long=1705000000L, hex=0XABCDEFU\n// Context: Time-of-flight phase gain\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_091 {\n    constexpr float kGain = 1.5F;       // C\n    constexpr unsigned kPeriod = 400U;  // C\n    constexpr long kEpoch = 1705000000L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[091] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_091::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "092",
    "context": "Depth filter temporal alpha",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 092 \u2014 NC (context: Depth filter temporal alpha)\n#include <iostream>\nint main() {\n    const float A = 0.43f;\n    const unsigned B = 16u;\n    const long C = 0l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 092 \u2014 C (context: Depth filter temporal alpha)\n#include <iostream>\nint main() {\n    const float A = 0.43F;\n    const unsigned B = 16U;\n    const long C = 0L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (092_nc.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Depth filter temporal alpha\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_092 {\n    constexpr float kGain = 0.43f;       // NC\n    constexpr unsigned kPeriod = 16u;  // NC\n    constexpr long kEpoch = 0l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[092] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_092::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (092_c.cpp)\n// Seed: Non-compliant: float=0.43f, unsigned=16u, long=0l, hex=0x1234u;  Compliant: float=0.43F, unsigned=16U, long=0L, hex=0X1234U\n// Context: Depth filter temporal alpha\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_092 {\n    constexpr float kGain = 0.43F;       // C\n    constexpr unsigned kPeriod = 16U;  // C\n    constexpr long kEpoch = 0L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[092] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_092::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "093",
    "context": "SLAM pose update weight",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 093 \u2014 NC (context: SLAM pose update weight)\n#include <iostream>\nint main() {\n    const float A = 1.f;\n    const unsigned B = 1024u;\n    const long C = 42l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 093 \u2014 C (context: SLAM pose update weight)\n#include <iostream>\nint main() {\n    const float A = 1.F;\n    const unsigned B = 1024U;\n    const long C = 42L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (093_nc.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: SLAM pose update weight\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_093 {\n    constexpr float kGain = 1.f;       // NC\n    constexpr unsigned kPeriod = 1024u;  // NC\n    constexpr long kEpoch = 42l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[093] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_093::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (093_c.cpp)\n// Seed: Non-compliant: float=1.f, unsigned=1024u, long=42l, hex=0xFFu;  Compliant: float=1.F, unsigned=1024U, long=42L, hex=0XFFU\n// Context: SLAM pose update weight\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_093 {\n    constexpr float kGain = 1.F;       // C\n    constexpr unsigned kPeriod = 1024U;  // C\n    constexpr long kEpoch = 42L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[093] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_093::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "094",
    "context": "Keyframe culling threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 094 \u2014 NC (context: Keyframe culling threshold)\n#include <iostream>\nint main() {\n    const float A = 0.0f;\n    const unsigned B = 1u;\n    const long C = 7l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 094 \u2014 C (context: Keyframe culling threshold)\n#include <iostream>\nint main() {\n    const float A = 0.0F;\n    const unsigned B = 1U;\n    const long C = 7L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (094_nc.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Keyframe culling threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_094 {\n    constexpr float kGain = 0.0f;       // NC\n    constexpr unsigned kPeriod = 1u;  // NC\n    constexpr long kEpoch = 7l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[094] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_094::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (094_c.cpp)\n// Seed: Non-compliant: float=0.0f, unsigned=1u, long=7l, hex=0x7fu;  Compliant: float=0.0F, unsigned=1U, long=7L, hex=0X7FU\n// Context: Keyframe culling threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_094 {\n    constexpr float kGain = 0.0F;       // C\n    constexpr unsigned kPeriod = 1U;  // C\n    constexpr long kEpoch = 7L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[094] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_094::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "095",
    "context": "Reprojection error clamp",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 095 \u2014 NC (context: Reprojection error clamp)\n#include <iostream>\nint main() {\n    const float A = 3.14159f;\n    const unsigned B = 60u;\n    const long C = 86400l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 095 \u2014 C (context: Reprojection error clamp)\n#include <iostream>\nint main() {\n    const float A = 3.14159F;\n    const unsigned B = 60U;\n    const long C = 86400L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (095_nc.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Reprojection error clamp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_095 {\n    constexpr float kGain = 3.14159f;       // NC\n    constexpr unsigned kPeriod = 60u;  // NC\n    constexpr long kEpoch = 86400l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[095] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_095::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (095_c.cpp)\n// Seed: Non-compliant: float=3.14159f, unsigned=60u, long=86400l, hex=0xabcdefu;  Compliant: float=3.14159F, unsigned=60U, long=86400L, hex=0XABCDEFU\n// Context: Reprojection error clamp\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_095 {\n    constexpr float kGain = 3.14159F;       // C\n    constexpr unsigned kPeriod = 60U;  // C\n    constexpr long kEpoch = 86400L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[095] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_095::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "096",
    "context": "Feature score threshold",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 096 \u2014 NC (context: Feature score threshold)\n#include <iostream>\nint main() {\n    const float A = 2.71828f;\n    const unsigned B = 250u;\n    const long C = 123456l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 096 \u2014 C (context: Feature score threshold)\n#include <iostream>\nint main() {\n    const float A = 2.71828F;\n    const unsigned B = 250U;\n    const long C = 123456L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (096_nc.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Feature score threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_096 {\n    constexpr float kGain = 2.71828f;       // NC\n    constexpr unsigned kPeriod = 250u;  // NC\n    constexpr long kEpoch = 123456l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[096] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_096::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (096_c.cpp)\n// Seed: Non-compliant: float=2.71828f, unsigned=250u, long=123456l, hex=0x1234u;  Compliant: float=2.71828F, unsigned=250U, long=123456L, hex=0X1234U\n// Context: Feature score threshold\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_096 {\n    constexpr float kGain = 2.71828F;       // C\n    constexpr unsigned kPeriod = 250U;  // C\n    constexpr long kEpoch = 123456L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[096] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_096::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "097",
    "context": "Tracker learning rate",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 097 \u2014 NC (context: Tracker learning rate)\n#include <iostream>\nint main() {\n    const float A = 0.125f;\n    const unsigned B = 2u;\n    const long C = 8l;\n    const unsigned H = 0xFFu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 097 \u2014 C (context: Tracker learning rate)\n#include <iostream>\nint main() {\n    const float A = 0.125F;\n    const unsigned B = 2U;\n    const long C = 8L;\n    const unsigned H = 0XFFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (097_nc.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Tracker learning rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_097 {\n    constexpr float kGain = 0.125f;       // NC\n    constexpr unsigned kPeriod = 2u;  // NC\n    constexpr long kEpoch = 8l;       // NC\n    constexpr unsigned kMask = 0xFFu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[097] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_097::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (097_c.cpp)\n// Seed: Non-compliant: float=0.125f, unsigned=2u, long=8l, hex=0xFFu;  Compliant: float=0.125F, unsigned=2U, long=8L, hex=0XFFU\n// Context: Tracker learning rate\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_097 {\n    constexpr float kGain = 0.125F;       // C\n    constexpr unsigned kPeriod = 2U;  // C\n    constexpr long kEpoch = 8L;       // C\n    constexpr unsigned kMask = 0XFFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[097] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_097::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "098",
    "context": "Loop closure inlier ratio",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 098 \u2014 NC (context: Loop closure inlier ratio)\n#include <iostream>\nint main() {\n    const float A = 0.75f;\n    const unsigned B = 200u;\n    const long C = 99l;\n    const unsigned H = 0x7fu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 098 \u2014 C (context: Loop closure inlier ratio)\n#include <iostream>\nint main() {\n    const float A = 0.75F;\n    const unsigned B = 200U;\n    const long C = 99L;\n    const unsigned H = 0X7FU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (098_nc.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Loop closure inlier ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_098 {\n    constexpr float kGain = 0.75f;       // NC\n    constexpr unsigned kPeriod = 200u;  // NC\n    constexpr long kEpoch = 99l;       // NC\n    constexpr unsigned kMask = 0x7fu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[098] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_098::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (098_c.cpp)\n// Seed: Non-compliant: float=0.75f, unsigned=200u, long=99l, hex=0x7fu;  Compliant: float=0.75F, unsigned=200U, long=99L, hex=0X7FU\n// Context: Loop closure inlier ratio\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_098 {\n    constexpr float kGain = 0.75F;       // C\n    constexpr unsigned kPeriod = 200U;  // C\n    constexpr long kEpoch = 99L;       // C\n    constexpr unsigned kMask = 0X7FU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[098] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_098::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "099",
    "context": "Occupancy grid decay",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 099 \u2014 NC (context: Occupancy grid decay)\n#include <iostream>\nint main() {\n    const float A = 6.02f;\n    const unsigned B = 10u;\n    const long C = 314159l;\n    const unsigned H = 0xabcdefu;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 099 \u2014 C (context: Occupancy grid decay)\n#include <iostream>\nint main() {\n    const float A = 6.02F;\n    const unsigned B = 10U;\n    const long C = 314159L;\n    const unsigned H = 0XABCDEFU;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (099_nc.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Occupancy grid decay\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_099 {\n    constexpr float kGain = 6.02f;       // NC\n    constexpr unsigned kPeriod = 10u;  // NC\n    constexpr long kEpoch = 314159l;       // NC\n    constexpr unsigned kMask = 0xabcdefu;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[099] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_099::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (099_c.cpp)\n// Seed: Non-compliant: float=6.02f, unsigned=10u, long=314159l, hex=0xabcdefu;  Compliant: float=6.02F, unsigned=10U, long=314159L, hex=0XABCDEFU\n// Context: Occupancy grid decay\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_099 {\n    constexpr float kGain = 6.02F;       // C\n    constexpr unsigned kPeriod = 10U;  // C\n    constexpr long kEpoch = 314159L;       // C\n    constexpr unsigned kMask = 0XABCDEFU;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[099] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_099::run();\n    return 0;\n}\n"
  },
  {
    "seed_id": "100",
    "context": "Path planner smoothing",
    "literal": "f,u,l, hex_u",
    "non_compliant_seed": "// Seed 100 \u2014 NC (context: Path planner smoothing)\n#include <iostream>\nint main() {\n    const float A = 9.81f;\n    const unsigned B = 50u;\n    const long C = 2024l;\n    const unsigned H = 0x1234u;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "compliant_seed": "// Seed 100 \u2014 C (context: Path planner smoothing)\n#include <iostream>\nint main() {\n    const float A = 9.81F;\n    const unsigned B = 50U;\n    const long C = 2024L;\n    const unsigned H = 0X1234U;\n    std::cout << A << \" \" << B << \" \" << C << \" \" << H << \"\\n\";\n    return 0;\n}\n",
    "non_compliant_program": "// ------ Non-Compliant Program (100_nc.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Path planner smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Violation: Lowercase literal/hex suffixes (f/u/l and '0x' with lowercase 'x' when paired with 'u').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_100 {\n    constexpr float kGain = 9.81f;       // NC\n    constexpr unsigned kPeriod = 50u;  // NC\n    constexpr long kEpoch = 2024l;       // NC\n    constexpr unsigned kMask = 0x1234u;   // NC\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01f;  // NC\n        s.value += s.rate * 0.005f; // NC\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0f, 0.0f}; // NC\n        for (unsigned t = 0u; t < 500u; ++t) { // NC\n            float in = std::sin(0.01f * static_cast<float>(t)); // NC\n            float y = step(s, in);\n            if ((t & kMask) == 0u) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[100] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_100::run();\n    return 0;\n}\n",
    "compliant_program": "// ------ Compliant Program (100_c.cpp)\n// Seed: Non-compliant: float=9.81f, unsigned=50u, long=2024l, hex=0x1234u;  Compliant: float=9.81F, unsigned=50U, long=2024L, hex=0X1234U\n// Context: Path planner smoothing\n// Source: MathWorks / Polyspace MISRA C++ Rule 2-13-4 (literal suffixes shall be upper case).\n// Fix: Uppercase literal/hex suffixes (F/U/L and '0X' when used with 'U').\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n#include <cmath>\n\nnamespace app_100 {\n    constexpr float kGain = 9.81F;       // C\n    constexpr unsigned kPeriod = 50U;  // C\n    constexpr long kEpoch = 2024L;       // C\n    constexpr unsigned kMask = 0X1234U;   // C\n\n    struct State {\n        float value;\n        float rate;\n    };\n\n    inline float step(State& s, float input) {\n        float error = input - s.value;\n        float corr = error * kGain;\n        s.rate += corr * 0.01F;  // C\n        s.value += s.rate * 0.005F; // C\n        return s.value;\n    }\n\n    void run() {\n        State s{0.0F, 0.0F}; // C\n        for (unsigned t = 0U; t < 500U; ++t) { // C\n            float in = std::sin(0.01F * static_cast<float>(t)); // C\n            float y = step(s, in);\n            if ((t & kMask) == 0U) {\n                std::cout << std::fixed << std::setprecision(3)\n                          << \"[100] t=\" << t << \" y=\" << y << \"\\n\";\n            }\n        }\n        std::cout << \"Epoch=\" << kEpoch << \" Period=\" << kPeriod << \"\\n\";\n    }\n}\n\nint main() {\n    app_100::run();\n    return 0;\n}\n"
  }
]